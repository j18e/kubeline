{%- set status_dir = '/stage-status' %}
{%- set short_commit = commit[:6] %}
apiVersion: batch/v1
kind: Job
metadata:
  generateName: "build-{{ name }}-"
  labels:
    app: kubeline
    type: build
    pipeline: "{{ name }}"
    commit: "{{ commit }}"
spec:
  # run only one single pod of the job
  backoffLimit: 0
  completions: 1
  metadata:
    labels:
      app: kubeline
      type: build
      pipeline: "{{ name }}"
      commit: "{{ commit }}"
  template:
    spec:
      # don't let the job run longer than 1 hour
      activeDeadlineSeconds: 3600
      restartPolicy: Never
      initContainers:
      - name: 0-clone
        image: alpine/git
        workingDir: /work
        command: [sh]
        args:
        - -c
        - |
          function fail() {
              touch {{ status_dir }}/STAGE_FAILURE
          }
          trap fail EXIT
          set -eux

          git clone -q {{ config.git_url }} .
          git checkout -q {{ commit }}
          touch {{ status_dir }}/STAGE_0_COMPLETE
        volumeMounts:
        - name: work
          mountPath: /work
        - name: status
          mountPath: {{ status_dir }}
      containers:
      {%- for stage in stages %}
        {%- set stage_number = loop.index %}
        {%- set previous_stage_number = loop.index - 1 %}
      - name: {{ stage_number}}-{{ stage.name }}
        image: alpine:3.9
        workingDir: /work
        command: [sh]
        args:
        - -c
        - |
          function fail() {
              touch {{ status_dir }}/STAGE_FAILURE
          }
          trap fail EXIT
          set -eu

          echo "waiting for completion of stage {{ previous_stage_number }}..."
          until [ -f "{{ status_dir }}/STAGE_{{ previous_stage_number }}_COMPLETE" ]; do
              if [ -f "{{ status_dir }}/STAGE_FAILURE" ]; then
                  echo "exiting due to previous stage failure..."
                  exit 0
              fi
              sleep 1
          done
          echo "starting"

          set -x
          {%- if stage.type == 'docker-build' %}
          {%- set docker_image = 'kubeline-{}:{}'.format(stage.name, short_commit) %}
          docker build -t {{ docker_image }} .
          {%- elif stage.type == 'docker-push' %}
          {%- set docker_image = 'kubeline-{}:{}'.format(stage.from_stage, short_commit) %}
          {%- for tag in stage.tags %}
          docker tag {{ docker_image }} "{{ stage.repo }}:{{ tag }}"
          docker push "{{ stage.repo }}:{{ tag }}"
          {%- endfor %}
          {%- endif %}
          set +x
          echo "finished stage {{ stage_number }} {{ stage.name }}"
          touch {{ status_dir }}/STAGE_{{ stage_number }}_COMPLETE
        env:
        - name: KUBELINE_GIT_BRANCH
          value: "{{ config.branch }}"
        - name: KUBELINE_GIT_COMMIT
          value: "{{ commit }}"
        - name: KUBELINE_GIT_COMMIT_SHORT
          value: "{{ short_commit }}"
        - name: KUBELINE_DOCKER_IMAGE
          value: "{{ docker_image }}"
        volumeMounts:
        - name: work
          mountPath: /work
        - name: status
          mountPath: {{ status_dir }}
        {%- if stage.type == 'docker-build' or 'docker-push' %}
        - name: docker-socket
          mountPath: /var/run/docker.sock
        - name: docker-binary
          mountPath: /usr/bin/docker
          {%- if 'docker_secret' in config %}
        - name: docker-creds
          mountPath: /root/.docker/config.json
          subPath: .dockerconfigjson
          {%- endif %}
        {%- endif %}
      {%- endfor %}
      volumes:
      - name: work
        emptyDir: {}
      - name: status
        emptyDir: {}
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: docker-binary
        hostPath:
          path: /usr/bin/docker
      {%- if 'docker_secret' in config %}
      - name: docker-creds
        secret:
          secretName: {{ config.docker_secret }}
      {%- endif %}

